// Generated by CoffeeScript 1.6.3
/*
*/

var Common,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

Common = (function() {
  function Common(connector, model, readFields) {
    this.connector = connector;
    this.model = model;
    this.readFields = readFields;
    this.unlink = __bind(this.unlink, this);
    this.write = __bind(this.write, this);
    this.read = __bind(this.read, this);
    this.search = __bind(this.search, this);
    this.create = __bind(this.create, this);
  }

  Common.prototype.create = function(fields) {
    return this.connector.execute(this.model, 'create', fields);
  };

  Common.prototype.search = function(args, offset, limit) {
    if (offset == null) {
      offset = 0;
    }
    if (limit == null) {
      limit = 1000;
    }
    return this.connector.execute(this.model, 'search', args, offset, limit);
  };

  Common.prototype.read = function(ids, fields) {
    if (fields == null) {
      fields = this.readFields;
    }
    return this.connector.execute(this.model, 'read', ids, fields);
  };

  Common.prototype.write = function(ids, data) {
    return this.connector.execute(this.model, 'write', ids, data);
  };

  Common.prototype.unlink = function(ids) {
    return this.connector.execute(this.model, 'unlink', ids);
  };

  return Common;

})();

module.exports = Common;
