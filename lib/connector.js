// Generated by CoffeeScript 1.6.3
/*
*/

var Connector, Q, xmlrpc,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __slice = [].slice;

xmlrpc = require('xmlrpc');

Q = require('q');

Connector = (function() {
  function Connector(dbname, hostname, port) {
    this.dbname = dbname;
    this.hostname = hostname;
    this.port = port;
    this.execute = __bind(this.execute, this);
    this.getParams = __bind(this.getParams, this);
    this.setUser = __bind(this.setUser, this);
    this.url = 'http://' + hostname + ':' + port + '/xmlrpc';
    this.common = {
      host: this.hostname,
      port: this.port,
      path: '/xmlrpc/common'
    };
    this.object = {
      host: this.hostname,
      port: this.port,
      path: '/xmlrpc/object'
    };
    this.rpc_common = xmlrpc.createClient(this.common);
    this.rpc_object = xmlrpc.createClient(this.object);
    this.commonCall = Q.nbind(this.rpc_common.methodCall, this.rpc_common);
    this.objectCall = Q.nbind(this.rpc_object.methodCall, this.rpc_object);
  }

  Connector.prototype.setUser = function(uid, passwd) {
    this.uid = uid;
    this.passwd = passwd;
  };

  Connector.prototype.getParams = function() {
    return [this.dbname, this.uid, this.passwd];
  };

  Connector.prototype.execute = function() {
    var action, args, model, params;
    model = arguments[0], action = arguments[1], args = 3 <= arguments.length ? __slice.call(arguments, 2) : [];
    params = this.getParams();
    params.push.apply(params, [model, action]);
    params.push.apply(params, args);
    return this.objectCall('execute', params);
  };

  return Connector;

})();

module.exports = Connector;
